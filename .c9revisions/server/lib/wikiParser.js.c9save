{"ts":1379346149546,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1379346174010,"patch":[[{"diffs":[[1,"var _ = require(\"underscore\"),\n  converter = require(\"./../converter/wikiToHTMLConverter\");\n\n_.str = require(\"underscore.string\");\n_.mixin(_.str.exports());\n\nfunction parseJson(wiki, callback) {\n  if (wiki.query && wiki.query.pages) {\n    var keys = Object.keys(wiki.query.pages);\n    if (keys.length > 0) {\n\n      if (!wiki.query.pages[keys[0]].revisions) {\n        // page not found\n        callback(null, null);\n        return;\n      }\n\n      var metaDataCounter = 0;\n      //Take the first result\n      var latestArticle = wiki.query.pages[keys[0]].revisions[0][\"*\"];\n//      console.log(latestArticle);\n      var lines = latestArticle.split(\"\\n\");\n      var linesToParse = [];\n      var parsedText = \"\";\n      var sectionLines = [];\n\n      lines.forEach(function (line) {\n        //Ignoring metadata information\n        var matchArray = line.match(/\\{\\{/g);\n        var openingDoubleCurlyBracketsCount = matchArray ? matchArray.length : 0;\n\n        matchArray = line.match(/\\}\\}/g);\n        var closingDoubleCurlyBracketsCount = matchArray ? matchArray.length : 0;\n\n        if (openingDoubleCurlyBracketsCount > closingDoubleCurlyBracketsCount) {\n          ++metaDataCounter;\n        } else if (closingDoubleCurlyBracketsCount > openingDoubleCurlyBracketsCount) {\n          --metaDataCounter;\n        }\n\n        if (metaDataCounter === 0 && !(_(line).startsWith(\"}}\") ||\n                                      _(line).startsWith(\"|\") ||\n                                      _(line).startsWith(\"{\") ||\n                                      _(line).startsWith(\"<\") ||\n                                      _(line).startsWith(\"[[File\") ||\n                                      _(line).startsWith(\"\\n\") ||\n                                      line.length === 0)) {\n          sectionLines.push(line);\n        }\n      });\n\n      //Add the section lines to the lines to parse array if it was not already done\n      if (linesToParse.length === 0) {\n        linesToParse.push(sectionLines);\n      }\n\n      linesToParse.forEach(function (sectionLines) {\n        var list = false;\n        sectionLines.forEach(function (line) {\n\n          var convertedLine = converter.convertLineToHTML(line);\n\n          if(_(convertedLine).startsWith(\"*\")){\n            if(!list){\n              list = true;\n              parsedText += \"<ul>\\n\";\n            }\n            parsedText += \"<li>\" + convertedLine.substring(1) + \"</li>\\n\";\n          }else if(_(convertedLine).startsWith(\"<h\")){\n            if(list){\n              parsedText += \"</ul>\\n\";\n              list = false;\n            }\n            parsedText += convertedLine + \"\\n\";\n          }else{\n            if(list){\n              parsedText += \"</ul>\\n\";\n              list = false;\n            }\n            parsedText += \"<p>\" + convertedLine + \"</p>\\n\";\n          }\n\n        });\n      });\n\n      process.nextTick(function () {\n        callback(null, parsedText);\n      });\n    } else {\n      process.nextTick(function () {\n        callback(null, null);\n      });\n    }\n  } else {\n    process.nextTick(function () {\n      callback(new Error(\"Unable to parse json\"), null);\n    });\n  }\n}\n\n\nmodule.exports.parse = function (wiki, format, callback) {\n  //if (format === \"json\") {\n    parseJson(wiki, callback);\n  //} else {\n  //  process.nextTick(function () {\n  //    callback(new Error(\"Unrecognized format [format=\" + format + \"]\"));\n  //  });\n  //}\n};"]],"start1":0,"start2":0,"length1":0,"length2":3398}]],"length":3398,"saved":false}
{"ts":1379346307870,"patch":[[{"diffs":[[0,"re(\""],[-1,"./../converter/"],[0,"wiki"]],"start1":50,"start2":50,"length1":23,"length2":8}]],"length":3383,"saved":false}
{"contributors":[],"silentsave":false,"ts":1379347081326,"patch":[[{"diffs":[[0,"equire(\""],[1,"./"],[0,"wikiToHT"]],"start1":46,"start2":46,"length1":16,"length2":18}]],"length":3385,"saved":false}
